CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

IF(USE_CUDA)
set(CUDA_SEPARABLE_COMPILATION ON)
list(APPEND CUDA_NVCC_FLAGS "--use_fast_math;-arch=compute_${CARD_NUMBER};-code=sm_${CARD_NUMBER};-std=c++11;-DVERBOSE;-DEIGEN_USE_GPU;-DHAVE_CUDA;")
SET(CUDA_PROPAGATE_HOST_FLAGS OFF)
if (CMAKE_BUILD_TYPE MATCHES debug)
     list(APPEND CUDA_NVCC_FLAGS "-G")
     list(APPEND CUDA_NVCC_FLAGS "-g")
    list(APPEND CUDA_NVCC_FLAGS "-O1")
else()
    list(APPEND CUDA_NVCC_FLAGS "-O3")
endif()
ADD_DEFINITIONS(-DUSE_GPU)
INCLUDE_DIRECTORIES(/usr/local/cuda/samples/common/inc)
FIND_PACKAGE(CUDA REQUIRED)
FIND_CUDA_HELPER_LIBS(curand)
SET(CUDA_TOOLKIT_ROOT_DIR ${CUDA_ROOT})
MESSAGE("CUDA_INCLUDE: " ${CUDA_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(SYSTEM ${CUDA_INCLUDE_DIRS})
SET(CUDA_LIBRARIES ${CUDA_LIBRARIES} ${CUDA_curand_LIBRARY})
MESSAGE("CUDA_LIBRARIES: ${CUDA_LIBRARIES}")
SET(LIBS ${LIBS} ${CUDA_LIBRARIES})
INCLUDE_DIRECTORIES(cnmem/include cuda include)
ADD_SUBDIRECTORY(cnmem)
CUDA_ADD_LIBRARY(n3ldg_cuda cuda/N3LDG_cuda.cu)
CUDA_ADD_CUBLAS_TO_TARGET(n3ldg_cuda)
TARGET_LINK_LIBRARIES(n3ldg_cuda cnmem)
SET(LIBS ${LIBS} n3ldg_cuda)
ENDIF()
